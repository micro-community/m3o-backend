// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/mixpanel.proto

package mixpanel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Mixpanel service

func NewMixpanelEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Mixpanel service

type MixpanelService interface {
	Ping(ctx context.Context, in *PingRequest, opts ...client.CallOption) (*PingResponse, error)
}

type mixpanelService struct {
	c    client.Client
	name string
}

func NewMixpanelService(name string, c client.Client) MixpanelService {
	return &mixpanelService{
		c:    c,
		name: name,
	}
}

func (c *mixpanelService) Ping(ctx context.Context, in *PingRequest, opts ...client.CallOption) (*PingResponse, error) {
	req := c.c.NewRequest(c.name, "Mixpanel.Ping", in)
	out := new(PingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mixpanel service

type MixpanelHandler interface {
	Ping(context.Context, *PingRequest, *PingResponse) error
}

func RegisterMixpanelHandler(s server.Server, hdlr MixpanelHandler, opts ...server.HandlerOption) error {
	type mixpanel interface {
		Ping(ctx context.Context, in *PingRequest, out *PingResponse) error
	}
	type Mixpanel struct {
		mixpanel
	}
	h := &mixpanelHandler{hdlr}
	return s.Handle(s.NewHandler(&Mixpanel{h}, opts...))
}

type mixpanelHandler struct {
	MixpanelHandler
}

func (h *mixpanelHandler) Ping(ctx context.Context, in *PingRequest, out *PingResponse) error {
	return h.MixpanelHandler.Ping(ctx, in, out)
}
