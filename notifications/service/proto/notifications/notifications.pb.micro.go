// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/notifications/notifications.proto

package go_micro_service_notifications

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for Notifications service

func NewNotificationsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Notifications service

type NotificationsService interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...client.CallOption) (*UnsubscribeResponse, error)
	MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...client.CallOption) (*MarkAsReadResponse, error)
	Notify(ctx context.Context, in *NotifyRequest, opts ...client.CallOption) (*NotifyResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscribptionsRequest, opts ...client.CallOption) (*ListSubscriptionsResponse, error)
}

type notificationsService struct {
	name string
}

func NewNotificationsService(name string) NotificationsService {
	return &notificationsService{name: name}
}

func (c *notificationsService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error) {
	req := microClient.NewRequest(c.name, "Notifications.Subscribe", in)
	out := new(SubscribeResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsService) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...client.CallOption) (*UnsubscribeResponse, error) {
	req := microClient.NewRequest(c.name, "Notifications.Unsubscribe", in)
	out := new(UnsubscribeResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsService) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...client.CallOption) (*MarkAsReadResponse, error) {
	req := microClient.NewRequest(c.name, "Notifications.MarkAsRead", in)
	out := new(MarkAsReadResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsService) Notify(ctx context.Context, in *NotifyRequest, opts ...client.CallOption) (*NotifyResponse, error) {
	req := microClient.NewRequest(c.name, "Notifications.Notify", in)
	out := new(NotifyResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := microClient.NewRequest(c.name, "Notifications.List", in)
	out := new(ListResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsService) ListSubscriptions(ctx context.Context, in *ListSubscribptionsRequest, opts ...client.CallOption) (*ListSubscriptionsResponse, error) {
	req := microClient.NewRequest(c.name, "Notifications.ListSubscriptions", in)
	out := new(ListSubscriptionsResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifications service

type NotificationsHandler interface {
	Subscribe(context.Context, *SubscribeRequest, *SubscribeResponse) error
	Unsubscribe(context.Context, *UnsubscribeRequest, *UnsubscribeResponse) error
	MarkAsRead(context.Context, *MarkAsReadRequest, *MarkAsReadResponse) error
	Notify(context.Context, *NotifyRequest, *NotifyResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	ListSubscriptions(context.Context, *ListSubscribptionsRequest, *ListSubscriptionsResponse) error
}

func RegisterNotificationsHandler(hdlr NotificationsHandler, opts ...server.HandlerOption) error {
	type notifications interface {
		Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error
		Unsubscribe(ctx context.Context, in *UnsubscribeRequest, out *UnsubscribeResponse) error
		MarkAsRead(ctx context.Context, in *MarkAsReadRequest, out *MarkAsReadResponse) error
		Notify(ctx context.Context, in *NotifyRequest, out *NotifyResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		ListSubscriptions(ctx context.Context, in *ListSubscribptionsRequest, out *ListSubscriptionsResponse) error
	}
	type Notifications struct {
		notifications
	}
	h := &notificationsHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&Notifications{h}, opts...))
}

type notificationsHandler struct {
	NotificationsHandler
}

func (h *notificationsHandler) Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error {
	return h.NotificationsHandler.Subscribe(ctx, in, out)
}

func (h *notificationsHandler) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, out *UnsubscribeResponse) error {
	return h.NotificationsHandler.Unsubscribe(ctx, in, out)
}

func (h *notificationsHandler) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, out *MarkAsReadResponse) error {
	return h.NotificationsHandler.MarkAsRead(ctx, in, out)
}

func (h *notificationsHandler) Notify(ctx context.Context, in *NotifyRequest, out *NotifyResponse) error {
	return h.NotificationsHandler.Notify(ctx, in, out)
}

func (h *notificationsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.NotificationsHandler.List(ctx, in, out)
}

func (h *notificationsHandler) ListSubscriptions(ctx context.Context, in *ListSubscribptionsRequest, out *ListSubscriptionsResponse) error {
	return h.NotificationsHandler.ListSubscriptions(ctx, in, out)
}
