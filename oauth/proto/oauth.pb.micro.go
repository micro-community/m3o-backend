// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/oauth.proto

package oauth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Oauth service

func NewOauthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Oauth service

type OauthService interface {
	GoogleURL(ctx context.Context, in *GoogleURLRequest, opts ...client.CallOption) (*GoogleURLResponse, error)
	GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	GithubURL(ctx context.Context, in *GithubURLRequest, opts ...client.CallOption) (*GithubURLResponse, error)
	GithubLogin(ctx context.Context, in *GithubLoginRequest, opts ...client.CallOption) (*LoginResponse, error)
}

type oauthService struct {
	c    client.Client
	name string
}

func NewOauthService(name string, c client.Client) OauthService {
	return &oauthService{
		c:    c,
		name: name,
	}
}

func (c *oauthService) GoogleURL(ctx context.Context, in *GoogleURLRequest, opts ...client.CallOption) (*GoogleURLResponse, error) {
	req := c.c.NewRequest(c.name, "Oauth.GoogleURL", in)
	out := new(GoogleURLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthService) GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Oauth.GoogleLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthService) GithubURL(ctx context.Context, in *GithubURLRequest, opts ...client.CallOption) (*GithubURLResponse, error) {
	req := c.c.NewRequest(c.name, "Oauth.GithubURL", in)
	out := new(GithubURLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthService) GithubLogin(ctx context.Context, in *GithubLoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Oauth.GithubLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Oauth service

type OauthHandler interface {
	GoogleURL(context.Context, *GoogleURLRequest, *GoogleURLResponse) error
	GoogleLogin(context.Context, *GoogleLoginRequest, *LoginResponse) error
	GithubURL(context.Context, *GithubURLRequest, *GithubURLResponse) error
	GithubLogin(context.Context, *GithubLoginRequest, *LoginResponse) error
}

func RegisterOauthHandler(s server.Server, hdlr OauthHandler, opts ...server.HandlerOption) error {
	type oauth interface {
		GoogleURL(ctx context.Context, in *GoogleURLRequest, out *GoogleURLResponse) error
		GoogleLogin(ctx context.Context, in *GoogleLoginRequest, out *LoginResponse) error
		GithubURL(ctx context.Context, in *GithubURLRequest, out *GithubURLResponse) error
		GithubLogin(ctx context.Context, in *GithubLoginRequest, out *LoginResponse) error
	}
	type Oauth struct {
		oauth
	}
	h := &oauthHandler{hdlr}
	return s.Handle(s.NewHandler(&Oauth{h}, opts...))
}

type oauthHandler struct {
	OauthHandler
}

func (h *oauthHandler) GoogleURL(ctx context.Context, in *GoogleURLRequest, out *GoogleURLResponse) error {
	return h.OauthHandler.GoogleURL(ctx, in, out)
}

func (h *oauthHandler) GoogleLogin(ctx context.Context, in *GoogleLoginRequest, out *LoginResponse) error {
	return h.OauthHandler.GoogleLogin(ctx, in, out)
}

func (h *oauthHandler) GithubURL(ctx context.Context, in *GithubURLRequest, out *GithubURLResponse) error {
	return h.OauthHandler.GithubURL(ctx, in, out)
}

func (h *oauthHandler) GithubLogin(ctx context.Context, in *GithubLoginRequest, out *LoginResponse) error {
	return h.OauthHandler.GithubLogin(ctx, in, out)
}
