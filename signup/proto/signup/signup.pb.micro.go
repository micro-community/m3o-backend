// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/signup/signup.proto

package go_micro_service_signup

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for Signup service

func NewSignupEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Signup service

type SignupService interface {
	SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, opts ...client.CallOption) (*SendVerificationEmailResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
	// Creates a subscription and an account
	CompleteSignup(ctx context.Context, in *CompleteSignupRequest, opts ...client.CallOption) (*CompleteSignupResponse, error)
}

type signupService struct {
	name string
}

func NewSignupService(name string) SignupService {
	return &signupService{name: name}
}

func (c *signupService) SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, opts ...client.CallOption) (*SendVerificationEmailResponse, error) {
	req := microClient.NewRequest(c.name, "Signup.SendVerificationEmail", in)
	out := new(SendVerificationEmailResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupService) Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := microClient.NewRequest(c.name, "Signup.Verify", in)
	out := new(VerifyResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupService) CompleteSignup(ctx context.Context, in *CompleteSignupRequest, opts ...client.CallOption) (*CompleteSignupResponse, error) {
	req := microClient.NewRequest(c.name, "Signup.CompleteSignup", in)
	out := new(CompleteSignupResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signup service

type SignupHandler interface {
	SendVerificationEmail(context.Context, *SendVerificationEmailRequest, *SendVerificationEmailResponse) error
	Verify(context.Context, *VerifyRequest, *VerifyResponse) error
	// Creates a subscription and an account
	CompleteSignup(context.Context, *CompleteSignupRequest, *CompleteSignupResponse) error
}

func RegisterSignupHandler(hdlr SignupHandler, opts ...server.HandlerOption) error {
	type signup interface {
		SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, out *SendVerificationEmailResponse) error
		Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
		CompleteSignup(ctx context.Context, in *CompleteSignupRequest, out *CompleteSignupResponse) error
	}
	type Signup struct {
		signup
	}
	h := &signupHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&Signup{h}, opts...))
}

type signupHandler struct {
	SignupHandler
}

func (h *signupHandler) SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, out *SendVerificationEmailResponse) error {
	return h.SignupHandler.SendVerificationEmail(ctx, in, out)
}

func (h *signupHandler) Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.SignupHandler.Verify(ctx, in, out)
}

func (h *signupHandler) CompleteSignup(ctx context.Context, in *CompleteSignupRequest, out *CompleteSignupResponse) error {
	return h.SignupHandler.CompleteSignup(ctx, in, out)
}
