// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/invite.proto

package go_micro_service_projects_invite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for InviteService service

func NewInviteServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InviteService service

type InviteService interface {
	// Generate an invite to a user. An email will be sent to this
	// user containing a code which is valid for 24 hours.
	Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error)
	// Verify is called to ensure a code is valid, e.g has not expired.
	// This rpc should be called when the user opens the link in their
	// email before they create a profile.
	Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
	// Redeem is used called after user completes signup and has an account.
	// Now they have an account we can redeem the invite and add the user
	// to the project. Once this rpc is called, the invite code can no longer
	// be used. The email address used when generating the invite must match
	// the email of the user redeeming the token.
	Redeem(ctx context.Context, in *RedeemRequest, opts ...client.CallOption) (*RedeemResponse, error)
}

type inviteService struct {
	name string
}

func NewInviteService(name string) InviteService {
	return &inviteService{name: name}
}

func (c *inviteService) Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error) {
	req := microClient.NewRequest(c.name, "InviteService.Generate", in)
	out := new(GenerateResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteService) Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := microClient.NewRequest(c.name, "InviteService.Verify", in)
	out := new(VerifyResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteService) Redeem(ctx context.Context, in *RedeemRequest, opts ...client.CallOption) (*RedeemResponse, error) {
	req := microClient.NewRequest(c.name, "InviteService.Redeem", in)
	out := new(RedeemResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InviteService service

type InviteServiceHandler interface {
	// Generate an invite to a user. An email will be sent to this
	// user containing a code which is valid for 24 hours.
	Generate(context.Context, *GenerateRequest, *GenerateResponse) error
	// Verify is called to ensure a code is valid, e.g has not expired.
	// This rpc should be called when the user opens the link in their
	// email before they create a profile.
	Verify(context.Context, *VerifyRequest, *VerifyResponse) error
	// Redeem is used called after user completes signup and has an account.
	// Now they have an account we can redeem the invite and add the user
	// to the project. Once this rpc is called, the invite code can no longer
	// be used. The email address used when generating the invite must match
	// the email of the user redeeming the token.
	Redeem(context.Context, *RedeemRequest, *RedeemResponse) error
}

func RegisterInviteServiceHandler(hdlr InviteServiceHandler, opts ...server.HandlerOption) error {
	type inviteService interface {
		Generate(ctx context.Context, in *GenerateRequest, out *GenerateResponse) error
		Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
		Redeem(ctx context.Context, in *RedeemRequest, out *RedeemResponse) error
	}
	type InviteService struct {
		inviteService
	}
	h := &inviteServiceHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&InviteService{h}, opts...))
}

type inviteServiceHandler struct {
	InviteServiceHandler
}

func (h *inviteServiceHandler) Generate(ctx context.Context, in *GenerateRequest, out *GenerateResponse) error {
	return h.InviteServiceHandler.Generate(ctx, in, out)
}

func (h *inviteServiceHandler) Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.InviteServiceHandler.Verify(ctx, in, out)
}

func (h *inviteServiceHandler) Redeem(ctx context.Context, in *RedeemRequest, out *RedeemResponse) error {
	return h.InviteServiceHandler.Redeem(ctx, in, out)
}
