// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/projects.proto

package projects

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Projects service

func NewProjectsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Projects service

type ProjectsService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
}

type projectsService struct {
	c    client.Client
	name string
}

func NewProjectsService(name string, c client.Client) ProjectsService {
	return &projectsService{
		c:    c,
		name: name,
	}
}

func (c *projectsService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Projects service

type ProjectsHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
}

func RegisterProjectsHandler(s server.Server, hdlr ProjectsHandler, opts ...server.HandlerOption) error {
	type projects interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
	}
	type Projects struct {
		projects
	}
	h := &projectsHandler{hdlr}
	return s.Handle(s.NewHandler(&Projects{h}, opts...))
}

type projectsHandler struct {
	ProjectsHandler
}

func (h *projectsHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.ProjectsHandler.Create(ctx, in, out)
}

func (h *projectsHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.ProjectsHandler.Read(ctx, in, out)
}

func (h *projectsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.ProjectsHandler.List(ctx, in, out)
}
