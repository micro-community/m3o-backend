// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/project.proto

package go_micro_service_projects

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for Projects service

func NewProjectsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Projects service

type ProjectsService interface {
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...client.CallOption) (*AddMemberResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...client.CallOption) (*RemoveMemberResponse, error)
	ListMemberships(ctx context.Context, in *ListMembershipsRequest, opts ...client.CallOption) (*ListMembershipsResponse, error)
}

type projectsService struct {
	name string
}

func NewProjectsService(name string) ProjectsService {
	return &projectsService{name: name}
}

func (c *projectsService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := microClient.NewRequest(c.name, "Projects.Read", in)
	out := new(ReadResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := microClient.NewRequest(c.name, "Projects.Create", in)
	out := new(CreateResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := microClient.NewRequest(c.name, "Projects.Update", in)
	out := new(UpdateResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := microClient.NewRequest(c.name, "Projects.List", in)
	out := new(ListResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) AddMember(ctx context.Context, in *AddMemberRequest, opts ...client.CallOption) (*AddMemberResponse, error) {
	req := microClient.NewRequest(c.name, "Projects.AddMember", in)
	out := new(AddMemberResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...client.CallOption) (*RemoveMemberResponse, error) {
	req := microClient.NewRequest(c.name, "Projects.RemoveMember", in)
	out := new(RemoveMemberResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) ListMemberships(ctx context.Context, in *ListMembershipsRequest, opts ...client.CallOption) (*ListMembershipsResponse, error) {
	req := microClient.NewRequest(c.name, "Projects.ListMemberships", in)
	out := new(ListMembershipsResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Projects service

type ProjectsHandler interface {
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	AddMember(context.Context, *AddMemberRequest, *AddMemberResponse) error
	RemoveMember(context.Context, *RemoveMemberRequest, *RemoveMemberResponse) error
	ListMemberships(context.Context, *ListMembershipsRequest, *ListMembershipsResponse) error
}

func RegisterProjectsHandler(hdlr ProjectsHandler, opts ...server.HandlerOption) error {
	type projects interface {
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		AddMember(ctx context.Context, in *AddMemberRequest, out *AddMemberResponse) error
		RemoveMember(ctx context.Context, in *RemoveMemberRequest, out *RemoveMemberResponse) error
		ListMemberships(ctx context.Context, in *ListMembershipsRequest, out *ListMembershipsResponse) error
	}
	type Projects struct {
		projects
	}
	h := &projectsHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&Projects{h}, opts...))
}

type projectsHandler struct {
	ProjectsHandler
}

func (h *projectsHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.ProjectsHandler.Read(ctx, in, out)
}

func (h *projectsHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.ProjectsHandler.Create(ctx, in, out)
}

func (h *projectsHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.ProjectsHandler.Update(ctx, in, out)
}

func (h *projectsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.ProjectsHandler.List(ctx, in, out)
}

func (h *projectsHandler) AddMember(ctx context.Context, in *AddMemberRequest, out *AddMemberResponse) error {
	return h.ProjectsHandler.AddMember(ctx, in, out)
}

func (h *projectsHandler) RemoveMember(ctx context.Context, in *RemoveMemberRequest, out *RemoveMemberResponse) error {
	return h.ProjectsHandler.RemoveMember(ctx, in, out)
}

func (h *projectsHandler) ListMemberships(ctx context.Context, in *ListMembershipsRequest, out *ListMembershipsResponse) error {
	return h.ProjectsHandler.ListMemberships(ctx, in, out)
}
