// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: secrets/proto/secrets.proto

package go_micro_service_secrets

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Secrets service

func NewSecretsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Secrets service

type SecretsService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type secretsService struct {
	c    client.Client
	name string
}

func NewSecretsService(name string, c client.Client) SecretsService {
	return &secretsService{
		c:    c,
		name: name,
	}
}

func (c *secretsService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Secrets.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "Secrets.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "Secrets.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Secrets.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Secrets service

type SecretsHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterSecretsHandler(s server.Server, hdlr SecretsHandler, opts ...server.HandlerOption) error {
	type secrets interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type Secrets struct {
		secrets
	}
	h := &secretsHandler{hdlr}
	return s.Handle(s.NewHandler(&Secrets{h}, opts...))
}

type secretsHandler struct {
	SecretsHandler
}

func (h *secretsHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.SecretsHandler.Create(ctx, in, out)
}

func (h *secretsHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.SecretsHandler.Read(ctx, in, out)
}

func (h *secretsHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.SecretsHandler.Update(ctx, in, out)
}

func (h *secretsHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.SecretsHandler.Delete(ctx, in, out)
}
