// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/provider.proto

package go_micro_srv_provider

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Provider service

func NewProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Provider service

type ProviderService interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error)
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...client.CallOption) (*CreatePlanResponse, error)
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...client.CallOption) (*ListPlansResponse, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...client.CallOption) (*CreateCustomerResponse, error)
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...client.CallOption) (*CreateSubscriptionResponse, error)
	// UpdateSubscription is currently used to update the quantity of a subscription.
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...client.CallOption) (*UpdateSubscriptionResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...client.CallOption) (*ListSubscriptionsResponse, error)
	CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...client.CallOption) (*CreatePaymentMethodResponse, error)
	ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...client.CallOption) (*ListPaymentMethodsResponse, error)
	SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, opts ...client.CallOption) (*SetDefaultPaymentMethodResponse, error)
	DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...client.CallOption) (*DeletePaymentMethodResponse, error)
	// Verify a payment method token that gets generated on m3o.com/subscribe
	// Different from ListPaymentMethod etc. endpoints as the pm token does not belong
	// to any customer yet.
	VerifyPaymentMethod(ctx context.Context, in *VerifyPaymentMethodRequest, opts ...client.CallOption) (*VerifyPaymentMethodResponse, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error)
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...client.CallOption) (*CancelSubscriptionResponse, error)
}

type providerService struct {
	c    client.Client
	name string
}

func NewProviderService(name string, c client.Client) ProviderService {
	return &providerService{
		c:    c,
		name: name,
	}
}

func (c *providerService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreateProduct", in)
	out := new(CreateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...client.CallOption) (*CreatePlanResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreatePlan", in)
	out := new(CreatePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...client.CallOption) (*ListPlansResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.ListPlans", in)
	out := new(ListPlansResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...client.CallOption) (*CreateCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreateCustomer", in)
	out := new(CreateCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...client.CallOption) (*CreateSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreateSubscription", in)
	out := new(CreateSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...client.CallOption) (*UpdateSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.UpdateSubscription", in)
	out := new(UpdateSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...client.CallOption) (*ListSubscriptionsResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.ListSubscriptions", in)
	out := new(ListSubscriptionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...client.CallOption) (*CreatePaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreatePaymentMethod", in)
	out := new(CreatePaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...client.CallOption) (*ListPaymentMethodsResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.ListPaymentMethods", in)
	out := new(ListPaymentMethodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, opts ...client.CallOption) (*SetDefaultPaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.SetDefaultPaymentMethod", in)
	out := new(SetDefaultPaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...client.CallOption) (*DeletePaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.DeletePaymentMethod", in)
	out := new(DeletePaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) VerifyPaymentMethod(ctx context.Context, in *VerifyPaymentMethodRequest, opts ...client.CallOption) (*VerifyPaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.VerifyPaymentMethod", in)
	out := new(VerifyPaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.DeleteCustomer", in)
	out := new(DeleteCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...client.CallOption) (*CancelSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CancelSubscription", in)
	out := new(CancelSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Provider service

type ProviderHandler interface {
	CreateProduct(context.Context, *CreateProductRequest, *CreateProductResponse) error
	CreatePlan(context.Context, *CreatePlanRequest, *CreatePlanResponse) error
	ListPlans(context.Context, *ListPlansRequest, *ListPlansResponse) error
	CreateCustomer(context.Context, *CreateCustomerRequest, *CreateCustomerResponse) error
	CreateSubscription(context.Context, *CreateSubscriptionRequest, *CreateSubscriptionResponse) error
	// UpdateSubscription is currently used to update the quantity of a subscription.
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest, *UpdateSubscriptionResponse) error
	ListSubscriptions(context.Context, *ListSubscriptionsRequest, *ListSubscriptionsResponse) error
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest, *CreatePaymentMethodResponse) error
	ListPaymentMethods(context.Context, *ListPaymentMethodsRequest, *ListPaymentMethodsResponse) error
	SetDefaultPaymentMethod(context.Context, *SetDefaultPaymentMethodRequest, *SetDefaultPaymentMethodResponse) error
	DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest, *DeletePaymentMethodResponse) error
	// Verify a payment method token that gets generated on m3o.com/subscribe
	// Different from ListPaymentMethod etc. endpoints as the pm token does not belong
	// to any customer yet.
	VerifyPaymentMethod(context.Context, *VerifyPaymentMethodRequest, *VerifyPaymentMethodResponse) error
	DeleteCustomer(context.Context, *DeleteCustomerRequest, *DeleteCustomerResponse) error
	CancelSubscription(context.Context, *CancelSubscriptionRequest, *CancelSubscriptionResponse) error
}

func RegisterProviderHandler(s server.Server, hdlr ProviderHandler, opts ...server.HandlerOption) error {
	type provider interface {
		CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error
		CreatePlan(ctx context.Context, in *CreatePlanRequest, out *CreatePlanResponse) error
		ListPlans(ctx context.Context, in *ListPlansRequest, out *ListPlansResponse) error
		CreateCustomer(ctx context.Context, in *CreateCustomerRequest, out *CreateCustomerResponse) error
		CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, out *CreateSubscriptionResponse) error
		UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, out *UpdateSubscriptionResponse) error
		ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, out *ListSubscriptionsResponse) error
		CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, out *CreatePaymentMethodResponse) error
		ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, out *ListPaymentMethodsResponse) error
		SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, out *SetDefaultPaymentMethodResponse) error
		DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, out *DeletePaymentMethodResponse) error
		VerifyPaymentMethod(ctx context.Context, in *VerifyPaymentMethodRequest, out *VerifyPaymentMethodResponse) error
		DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error
		CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, out *CancelSubscriptionResponse) error
	}
	type Provider struct {
		provider
	}
	h := &providerHandler{hdlr}
	return s.Handle(s.NewHandler(&Provider{h}, opts...))
}

type providerHandler struct {
	ProviderHandler
}

func (h *providerHandler) CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error {
	return h.ProviderHandler.CreateProduct(ctx, in, out)
}

func (h *providerHandler) CreatePlan(ctx context.Context, in *CreatePlanRequest, out *CreatePlanResponse) error {
	return h.ProviderHandler.CreatePlan(ctx, in, out)
}

func (h *providerHandler) ListPlans(ctx context.Context, in *ListPlansRequest, out *ListPlansResponse) error {
	return h.ProviderHandler.ListPlans(ctx, in, out)
}

func (h *providerHandler) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, out *CreateCustomerResponse) error {
	return h.ProviderHandler.CreateCustomer(ctx, in, out)
}

func (h *providerHandler) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, out *CreateSubscriptionResponse) error {
	return h.ProviderHandler.CreateSubscription(ctx, in, out)
}

func (h *providerHandler) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, out *UpdateSubscriptionResponse) error {
	return h.ProviderHandler.UpdateSubscription(ctx, in, out)
}

func (h *providerHandler) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, out *ListSubscriptionsResponse) error {
	return h.ProviderHandler.ListSubscriptions(ctx, in, out)
}

func (h *providerHandler) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, out *CreatePaymentMethodResponse) error {
	return h.ProviderHandler.CreatePaymentMethod(ctx, in, out)
}

func (h *providerHandler) ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, out *ListPaymentMethodsResponse) error {
	return h.ProviderHandler.ListPaymentMethods(ctx, in, out)
}

func (h *providerHandler) SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, out *SetDefaultPaymentMethodResponse) error {
	return h.ProviderHandler.SetDefaultPaymentMethod(ctx, in, out)
}

func (h *providerHandler) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, out *DeletePaymentMethodResponse) error {
	return h.ProviderHandler.DeletePaymentMethod(ctx, in, out)
}

func (h *providerHandler) VerifyPaymentMethod(ctx context.Context, in *VerifyPaymentMethodRequest, out *VerifyPaymentMethodResponse) error {
	return h.ProviderHandler.VerifyPaymentMethod(ctx, in, out)
}

func (h *providerHandler) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error {
	return h.ProviderHandler.DeleteCustomer(ctx, in, out)
}

func (h *providerHandler) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, out *CancelSubscriptionResponse) error {
	return h.ProviderHandler.CancelSubscription(ctx, in, out)
}
