// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/mailchimp.proto

package mailchimp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Mailchimp service

func NewMailchimpEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Mailchimp service

type MailchimpService interface {
	AddCustomer(ctx context.Context, in *AddCustomerRequest, opts ...client.CallOption) (*AddCustomerResponse, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error)
}

type mailchimpService struct {
	c    client.Client
	name string
}

func NewMailchimpService(name string, c client.Client) MailchimpService {
	return &mailchimpService{
		c:    c,
		name: name,
	}
}

func (c *mailchimpService) AddCustomer(ctx context.Context, in *AddCustomerRequest, opts ...client.CallOption) (*AddCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "Mailchimp.AddCustomer", in)
	out := new(AddCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailchimpService) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "Mailchimp.DeleteCustomer", in)
	out := new(DeleteCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mailchimp service

type MailchimpHandler interface {
	AddCustomer(context.Context, *AddCustomerRequest, *AddCustomerResponse) error
	DeleteCustomer(context.Context, *DeleteCustomerRequest, *DeleteCustomerResponse) error
}

func RegisterMailchimpHandler(s server.Server, hdlr MailchimpHandler, opts ...server.HandlerOption) error {
	type mailchimp interface {
		AddCustomer(ctx context.Context, in *AddCustomerRequest, out *AddCustomerResponse) error
		DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error
	}
	type Mailchimp struct {
		mailchimp
	}
	h := &mailchimpHandler{hdlr}
	return s.Handle(s.NewHandler(&Mailchimp{h}, opts...))
}

type mailchimpHandler struct {
	MailchimpHandler
}

func (h *mailchimpHandler) AddCustomer(ctx context.Context, in *AddCustomerRequest, out *AddCustomerResponse) error {
	return h.MailchimpHandler.AddCustomer(ctx, in, out)
}

func (h *mailchimpHandler) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error {
	return h.MailchimpHandler.DeleteCustomer(ctx, in, out)
}
