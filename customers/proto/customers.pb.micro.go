// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/customers.proto

package customers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Customers service

func NewCustomersEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Customers service

type CustomersService interface {
	// Creates a new, unverified customer
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	// Mark the customer as verified
	MarkVerified(ctx context.Context, in *MarkVerifiedRequest, opts ...client.CallOption) (*MarkVerifiedResponse, error)
	// Retrieve a customer
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	// Marks a customer as inactive
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type customersService struct {
	c    client.Client
	name string
}

func NewCustomersService(name string, c client.Client) CustomersService {
	return &customersService{
		c:    c,
		name: name,
	}
}

func (c *customersService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Customers.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersService) MarkVerified(ctx context.Context, in *MarkVerifiedRequest, opts ...client.CallOption) (*MarkVerifiedResponse, error) {
	req := c.c.NewRequest(c.name, "Customers.MarkVerified", in)
	out := new(MarkVerifiedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "Customers.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Customers.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Customers service

type CustomersHandler interface {
	// Creates a new, unverified customer
	Create(context.Context, *CreateRequest, *CreateResponse) error
	// Mark the customer as verified
	MarkVerified(context.Context, *MarkVerifiedRequest, *MarkVerifiedResponse) error
	// Retrieve a customer
	Read(context.Context, *ReadRequest, *ReadResponse) error
	// Marks a customer as inactive
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterCustomersHandler(s server.Server, hdlr CustomersHandler, opts ...server.HandlerOption) error {
	type customers interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		MarkVerified(ctx context.Context, in *MarkVerifiedRequest, out *MarkVerifiedResponse) error
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type Customers struct {
		customers
	}
	h := &customersHandler{hdlr}
	return s.Handle(s.NewHandler(&Customers{h}, opts...))
}

type customersHandler struct {
	CustomersHandler
}

func (h *customersHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.CustomersHandler.Create(ctx, in, out)
}

func (h *customersHandler) MarkVerified(ctx context.Context, in *MarkVerifiedRequest, out *MarkVerifiedResponse) error {
	return h.CustomersHandler.MarkVerified(ctx, in, out)
}

func (h *customersHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.CustomersHandler.Read(ctx, in, out)
}

func (h *customersHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.CustomersHandler.Delete(ctx, in, out)
}
