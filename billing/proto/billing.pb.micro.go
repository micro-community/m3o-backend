// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/billing.proto

package billing

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Billing service

func NewBillingEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Billing service

type BillingService interface {
	Portal(ctx context.Context, in *PortalRequest, opts ...client.CallOption) (*PortalResponse, error)
	// List updates to be made
	Updates(ctx context.Context, in *UpdatesRequest, opts ...client.CallOption) (*UpdatesResponse, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...client.CallOption) (*ApplyResponse, error)
}

type billingService struct {
	c    client.Client
	name string
}

func NewBillingService(name string, c client.Client) BillingService {
	return &billingService{
		c:    c,
		name: name,
	}
}

func (c *billingService) Portal(ctx context.Context, in *PortalRequest, opts ...client.CallOption) (*PortalResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.Portal", in)
	out := new(PortalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) Updates(ctx context.Context, in *UpdatesRequest, opts ...client.CallOption) (*UpdatesResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.Updates", in)
	out := new(UpdatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) Apply(ctx context.Context, in *ApplyRequest, opts ...client.CallOption) (*ApplyResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.Apply", in)
	out := new(ApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Billing service

type BillingHandler interface {
	Portal(context.Context, *PortalRequest, *PortalResponse) error
	// List updates to be made
	Updates(context.Context, *UpdatesRequest, *UpdatesResponse) error
	Apply(context.Context, *ApplyRequest, *ApplyResponse) error
}

func RegisterBillingHandler(s server.Server, hdlr BillingHandler, opts ...server.HandlerOption) error {
	type billing interface {
		Portal(ctx context.Context, in *PortalRequest, out *PortalResponse) error
		Updates(ctx context.Context, in *UpdatesRequest, out *UpdatesResponse) error
		Apply(ctx context.Context, in *ApplyRequest, out *ApplyResponse) error
	}
	type Billing struct {
		billing
	}
	h := &billingHandler{hdlr}
	return s.Handle(s.NewHandler(&Billing{h}, opts...))
}

type billingHandler struct {
	BillingHandler
}

func (h *billingHandler) Portal(ctx context.Context, in *PortalRequest, out *PortalResponse) error {
	return h.BillingHandler.Portal(ctx, in, out)
}

func (h *billingHandler) Updates(ctx context.Context, in *UpdatesRequest, out *UpdatesResponse) error {
	return h.BillingHandler.Updates(ctx, in, out)
}

func (h *billingHandler) Apply(ctx context.Context, in *ApplyRequest, out *ApplyResponse) error {
	return h.BillingHandler.Apply(ctx, in, out)
}
