// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/billing.proto

package billing

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Billing service

func NewBillingEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Billing service

type BillingService interface {
	// Subscribe to a tier
	SubscribeTier(ctx context.Context, in *SubscribeTierRequest, opts ...client.CallOption) (*SubscribeTierResponse, error)
	ReadAccount(ctx context.Context, in *ReadAccountRequest, opts ...client.CallOption) (*ReadAccountResponse, error)
	CreateCheckoutSession(ctx context.Context, in *CreateCheckoutSessionRequest, opts ...client.CallOption) (*CreateCheckoutSessionResponse, error)
	ListCards(ctx context.Context, in *ListCardsRequest, opts ...client.CallOption) (*ListCardsResponse, error)
	ChargeCard(ctx context.Context, in *ChargeCardRequest, opts ...client.CallOption) (*ChargeCardResponse, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...client.CallOption) (*DeleteCardResponse, error)
	ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...client.CallOption) (*ListPaymentsResponse, error)
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...client.CallOption) (*GetPaymentResponse, error)
	SetupCard(ctx context.Context, in *SetupCardRequest, opts ...client.CallOption) (*SetupCardResponse, error)
}

type billingService struct {
	c    client.Client
	name string
}

func NewBillingService(name string, c client.Client) BillingService {
	return &billingService{
		c:    c,
		name: name,
	}
}

func (c *billingService) SubscribeTier(ctx context.Context, in *SubscribeTierRequest, opts ...client.CallOption) (*SubscribeTierResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.SubscribeTier", in)
	out := new(SubscribeTierResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ReadAccount(ctx context.Context, in *ReadAccountRequest, opts ...client.CallOption) (*ReadAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.ReadAccount", in)
	out := new(ReadAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateCheckoutSession(ctx context.Context, in *CreateCheckoutSessionRequest, opts ...client.CallOption) (*CreateCheckoutSessionResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.CreateCheckoutSession", in)
	out := new(CreateCheckoutSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListCards(ctx context.Context, in *ListCardsRequest, opts ...client.CallOption) (*ListCardsResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.ListCards", in)
	out := new(ListCardsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ChargeCard(ctx context.Context, in *ChargeCardRequest, opts ...client.CallOption) (*ChargeCardResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.ChargeCard", in)
	out := new(ChargeCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...client.CallOption) (*DeleteCardResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.DeleteCard", in)
	out := new(DeleteCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...client.CallOption) (*ListPaymentsResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.ListPayments", in)
	out := new(ListPaymentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...client.CallOption) (*GetPaymentResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.GetPayment", in)
	out := new(GetPaymentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) SetupCard(ctx context.Context, in *SetupCardRequest, opts ...client.CallOption) (*SetupCardResponse, error) {
	req := c.c.NewRequest(c.name, "Billing.SetupCard", in)
	out := new(SetupCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Billing service

type BillingHandler interface {
	// Subscribe to a tier
	SubscribeTier(context.Context, *SubscribeTierRequest, *SubscribeTierResponse) error
	ReadAccount(context.Context, *ReadAccountRequest, *ReadAccountResponse) error
	CreateCheckoutSession(context.Context, *CreateCheckoutSessionRequest, *CreateCheckoutSessionResponse) error
	ListCards(context.Context, *ListCardsRequest, *ListCardsResponse) error
	ChargeCard(context.Context, *ChargeCardRequest, *ChargeCardResponse) error
	DeleteCard(context.Context, *DeleteCardRequest, *DeleteCardResponse) error
	ListPayments(context.Context, *ListPaymentsRequest, *ListPaymentsResponse) error
	GetPayment(context.Context, *GetPaymentRequest, *GetPaymentResponse) error
	SetupCard(context.Context, *SetupCardRequest, *SetupCardResponse) error
}

func RegisterBillingHandler(s server.Server, hdlr BillingHandler, opts ...server.HandlerOption) error {
	type billing interface {
		SubscribeTier(ctx context.Context, in *SubscribeTierRequest, out *SubscribeTierResponse) error
		ReadAccount(ctx context.Context, in *ReadAccountRequest, out *ReadAccountResponse) error
		CreateCheckoutSession(ctx context.Context, in *CreateCheckoutSessionRequest, out *CreateCheckoutSessionResponse) error
		ListCards(ctx context.Context, in *ListCardsRequest, out *ListCardsResponse) error
		ChargeCard(ctx context.Context, in *ChargeCardRequest, out *ChargeCardResponse) error
		DeleteCard(ctx context.Context, in *DeleteCardRequest, out *DeleteCardResponse) error
		ListPayments(ctx context.Context, in *ListPaymentsRequest, out *ListPaymentsResponse) error
		GetPayment(ctx context.Context, in *GetPaymentRequest, out *GetPaymentResponse) error
		SetupCard(ctx context.Context, in *SetupCardRequest, out *SetupCardResponse) error
	}
	type Billing struct {
		billing
	}
	h := &billingHandler{hdlr}
	return s.Handle(s.NewHandler(&Billing{h}, opts...))
}

type billingHandler struct {
	BillingHandler
}

func (h *billingHandler) SubscribeTier(ctx context.Context, in *SubscribeTierRequest, out *SubscribeTierResponse) error {
	return h.BillingHandler.SubscribeTier(ctx, in, out)
}

func (h *billingHandler) ReadAccount(ctx context.Context, in *ReadAccountRequest, out *ReadAccountResponse) error {
	return h.BillingHandler.ReadAccount(ctx, in, out)
}

func (h *billingHandler) CreateCheckoutSession(ctx context.Context, in *CreateCheckoutSessionRequest, out *CreateCheckoutSessionResponse) error {
	return h.BillingHandler.CreateCheckoutSession(ctx, in, out)
}

func (h *billingHandler) ListCards(ctx context.Context, in *ListCardsRequest, out *ListCardsResponse) error {
	return h.BillingHandler.ListCards(ctx, in, out)
}

func (h *billingHandler) ChargeCard(ctx context.Context, in *ChargeCardRequest, out *ChargeCardResponse) error {
	return h.BillingHandler.ChargeCard(ctx, in, out)
}

func (h *billingHandler) DeleteCard(ctx context.Context, in *DeleteCardRequest, out *DeleteCardResponse) error {
	return h.BillingHandler.DeleteCard(ctx, in, out)
}

func (h *billingHandler) ListPayments(ctx context.Context, in *ListPaymentsRequest, out *ListPaymentsResponse) error {
	return h.BillingHandler.ListPayments(ctx, in, out)
}

func (h *billingHandler) GetPayment(ctx context.Context, in *GetPaymentRequest, out *GetPaymentResponse) error {
	return h.BillingHandler.GetPayment(ctx, in, out)
}

func (h *billingHandler) SetupCard(ctx context.Context, in *SetupCardRequest, out *SetupCardResponse) error {
	return h.BillingHandler.SetupCard(ctx, in, out)
}
